plugins {
    id 'com.android.application'
    id 'kotlin-android'
    id 'org.mozilla.rust-android-gradle.rust-android'
}

android {
    compileSdkVersion 30
//    buildToolsVersion "30.0.3"

    defaultConfig {
        applicationId "com.example.rustandroidtest"
        minSdkVersion 28
        targetSdkVersion 30
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        ndk {
            abiFilters 'x86', 'armeabi-v7a', 'arm64-v8a'
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
}

cargo {
    // directory contains your Cargo.toml
    module  = "../rust"
    //matches Cargo.toml's [package] name.
    libname = "rust"
    // devices Platform.
    targets = ["arm", "arm64", "x86"]

    //I don't know why,but see https://github.com/mozilla/rust-android-gradle/issues/28
    exec { spec, toolchain ->
        def home = project.gradle.gradleUserHomeDir
        spec.environment("CARGO_TARGET_DIR", "$home/cargo-target")
    }
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    implementation 'androidx.core:core-ktx:1.6.0'
    implementation 'androidx.appcompat:appcompat:1.3.0'
    implementation 'com.google.android.material:material:1.4.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.0.4'
    testImplementation 'junit:junit:4.+'
    androidTestImplementation 'androidx.test.ext:junit:1.1.3'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.4.0'
}

afterEvaluate {
    // The `cargoBuild` task isn't available until after evaluation.
    android.applicationVariants.all { variant ->
        def productFlavor = ""
        variant.productFlavors.each {
            productFlavor += "${it.name.capitalize()}"
        }
        def buildType = "${variant.buildType.name.capitalize()}"
        tasks["generate${productFlavor}${buildType}Assets"].dependsOn(tasks["cargoBuild"])
    }
}